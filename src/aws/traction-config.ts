// File: src/aws/traction-config.ts
import * as aws from "@pulumi/aws";
import * as pulumi from "@pulumi/pulumi";

export interface TractionConfigOutputs {
    configBucket: pulumi.Output<string>;
    configObjectKey: pulumi.Output<string>;
}

export function createTractionConfig(): TractionConfigOutputs {
    const environment = pulumi.getStack();
    
    // Create S3 bucket for non-sensitive configuration
    const configBucket = new aws.s3.Bucket("traction-config", {
        bucket: `traction-config-${environment}-${pulumi.getOrganization()}-${pulumi.getProject()}`,
        acl: "private",
        versioning: {
            enabled: true,
        },
        tags: {
            Name: `traction-config-${environment}`,
            Environment: environment,
            Service: "traction"
        },
    });
    
    // Create configuration template with literal strings to avoid pulumi serialization issues
    const configTemplate = `
    # This file was generated by Pulumi
    # To be populated with values by the instance setup script

    # Public endpoint URL that is registered on the ledger
    # Will be replaced by instance script with actual public IP
    ACAPY_ENDPOINT=http://traction-agent:8030
    
    # Exposed service ports
    TRACTION_ACAPY_HTTP_PORT=8030
    TRACTION_ACAPY_ADMIN_PORT=8031
    TRACTION_ACAPY_ADMIN_URL=http://traction-agent:8031
    
    # Wallet Storage
    TRACTION_ACAPY_WALLET_NAME=digicredcrms-wallet
    TRACTION_ACAPY_WALLET_SCHEME=DatabasePerWallet
    
    # Multitenancy configuration vars
    TRACTION_MULTITENANCY_CONFIGURATION_WALLET_TYPE=askar-profile
    TRACTION_MULTITENANCY_CONFIGURATION_WALLET_NAME=askar-wallet
    
    # ------------------------------------------------------------
    # Aca-Py Startup configuration environment variables
    # ------------------------------------------------------------

    ACAPY_AUTO_PROVISION=true
    ACAPY_WALLET_TYPE=askar
    ACAPY_WALLET_STORAGE_TYPE=postgres_storage
    ACAPY_LABEL="Digicred Crms Agent"
    ACAPY_GENESIS_URL=http://genesis.digicred.services:9000/genesis
    ACAPY_GENESIS_URL_1=http://genesis.digicred.services:9000/genesis
    ACAPY_GENESIS_TRANSACTIONS_LIST=ledgers.yml
    ACAPY_READ_ONLY_LEDGER=false
    ACAPY_ADMIN_INSECURE_MODE=false

    ACAPY_AUTO_ACCEPT_INVITES=true
    ACAPY_AUTO_ACCEPT_REQUESTS=true
    ACAPY_AUTO_RESPOND_MESSAGES=true
    ACAPY_AUTO_RESPOND_CREDENTIAL_PROPOSAL=false
    ACAPY_AUTO_RESPOND_CREDENTIAL_OFFER=false
    ACAPY_AUTO_RESPOND_CREDENTIAL_REQUEST=true
    ACAPY_AUTO_RESPOND_PRESENTATION_PROPOSAL=true
    ACAPY_AUTO_RESPOND_PRESENTATION_REQUEST=false
    ACAPY_AUTO_VERIFY_PRESENTATION=true
    ACAPY_AUTO_PING_CONNECTION=true
    ACAPY_MONITOR_PING=true
    ACAPY_PUBLIC_INVITES=true

    ACAPY_LOG_LEVEL=info

    ACAPY_MULTITENANT=true
    ACAPY_MULTITENANT_ADMIN=true
    # The following will be replaced with actual value by instance setup script
    ACAPY_MULTITENANCY_CONFIGURATION={"wallet_type":"askar-profile","wallet_name":"askar-wallet"}
    ACAPY_EMIT_NEW_DIDCOMM_PREFIX=true
    ACAPY_EMIT_NEW_DIDCOMM_MIME_TYPE=true

    ACAPY_ENDORSER_ROLE=author
    ACAPY_ENDORSER_ALIAS=endorser
    ACAPY_AUTO_REQUEST_ENDORSEMENT=true
    ACAPY_AUTO_WRITE_TRANSACTIONS=true
    ACAPY_AUTO_PROMOTE_AUTHOR_DID=true

    ACAPY_CREATE_REVOCATION_TRANSACTIONS=true

    ACAPY_TAILS_SERVER_BASE_URL=https://tails-test.vonx.io
    ACAPY_TAILS_SERVER_UPLOAD_URL=https://tails-test.vonx.io

    ACAPY_NOTIFY_REVOCATION=true
    ACAPY_MONITOR_REVOCATION_NOTIFICATION=true

    ACAPY_PRESERVE_EXCHANGE_RECORDS=true
    ACAPY_AUTO_STORE_CREDENTIAL=true

    ACAPY_PLUGIN_CONFIG=plugin-config.yml

    # ------------------------------------------------------------
    # Postgres Storage
    # ------------------------------------------------------------

    POSTGRESQL_HOST=traction-db
    POSTGRESQL_PORT=5432
    POSTGRESQL_USER=postgres
    POSTGRESQL_DB=traction_acapy
    #POSTGRESQL_PASSWORD will be set by the instance script

    # ------------------------------------------------------------
    # Endorser Configuration
    # ------------------------------------------------------------

    ACAPY_ENDORSER_PUBLIC_DID=6f5Q4P6wbBz18NWagTUXNL
    ACAPY_ENDORSER_1_PUBLIC_DID=SStjc7Ykg493TQPC4BVgDV

    # ------------------------------------------------------------
    # Endorser Services
    # ------------------------------------------------------------

    ENDORSER_SERVICE_HOST=localhost
    ENDORSER_SERVICE_PORT=5300
    ENDORSER_1_SERVICE_PORT=5301
    ENDORSER_API_PORT=5000
    ENDORSER_API_1_PORT=5001

    ACAPY_ENDORSER_ADMIN_PORT=9031
    ACAPY_ENDORSER_HTTP_PORT=9030
    ACAPY_ENDORSER_ENDPOINT=http://endorser-agent:9030
    ACAPY_ENDORSER_1_ADMIN_PORT=9033
    ACAPY_ENDORSER_1_HTTP_PORT=9032
    ACAPY_ENDORSER_1_ENDPOINT=http://endorser-agent-1:9032

    ENDORSER_AGENT_NAME="Endorser Agent"
    ENDORSER_CONNECTION_ALIAS=endorser

    ENDORSER_ACAPY_READ_ONLY_MODE=

    # Admin endpoints configuration - these will be set by instance script
    ENDORSER_ACAPY_ADMIN_CONFIG=--admin-api-key __ENDORSER_API_KEY__
    ENDORSER_WEBHOOK_URL=http://endorser-api:5000/webhook#__WEBHOOK_API_KEY__
    ENDORSER_1_WEBHOOK_URL=http://endorser-api-1:5001/webhook#__WEBHOOK_API_KEY__

    ENDORSER_ACAPY_ADMIN_URL=http://endorser-agent:9031
    ENDORSER_1_ACAPY_ADMIN_URL=http://endorser-agent-1:9033

    ENDORSER_ACAPY_WALLET_TYPE=askar
    ENDORSER_ACAPY_WALLET_STORAGE_TYPE=postgres_storage
    ENDORSER_ACAPY_WALLET_DATABASE=endorser-wallet
    ENDORSER_1_ACAPY_WALLET_DATABASE=endorser-wallet-1

    ENDORSER_POSTGRESQL_HOST=endorser-db
    ENDORSER_1_POSTGRESQL_HOST=endorser-db-1
    ENDORSER_POSTGRESQL_PORT=5433
    ENDORSER_1_POSTGRESQL_PORT=5434
    ENDORSER_POSTGRESQL_USER=postgres
    #ENDORSER_POSTGRESQL_PASSWORD will be set by the instance script

    ## endorser
    ENDORSER_PSQL_DB=traction
    ENDORSER_PSQL_ADMIN=tractionadminuser
    ENDORSER_PSQL_USER=tractionuser
    #Passwords will be set by the instance script

    ENDORSER_API_ADMIN_USER=endorser
    #ENDORSER_API_ADMIN_KEY will be set by the instance script

    # ------------------------------------------------------------
    # Tenant UI Configuration
    # ------------------------------------------------------------
    SERVER_SMTP_SERVER=maildev
    SERVER_SMTP_PORT=1025
    TENANT_UI_PORT=5101

    #sisProxyPath tenant-ui front end
    FRONTEND_SIS_PROXY_URL=https://__PUBLIC_IP__:3008

    # Server & frontend URLs
    SERVER_TRACTION_URL=https://__PUBLIC_IP__:8032
    FRONTEND_TENANT_PROXY_URL=https://__PUBLIC_IP__:8032
    
    # which traction api are we using?
    # naming convention follows what is used by the tenant ui config
    IMAGE_BUILDTIME=
    IMAGE_TAG=scripts_tenant-ui:latest
    IMAGE_VERSION=latest
    UX_APP_TITLE=Traction Tenant Console
    UX_APP_INNKEEPER_TITLE=Traction Innkeeper Console
    UX_SIDEBAR_TITLE=Traction
    UX_COPYRIGHT=2024 Â© DigiCred Holdings
    UX_OWNER=DigiCred Holdings
    FRONTEND_QUICK_CONNECT_ENDORSER_NAME=digicred-test-endorser

    # ------------------------------------------------------------
    # Tenant Proxy
    # ------------------------------------------------------------
    TENANT_PROXY_PORT=8032

    # ------------------------------------------------------------
    # Tenant LOB Server/Controller
    # ------------------------------------------------------------
    LOB_SERVER_TRACTION_URL=http://host.docker.internal:8032
    LOB_WEBHOOK_URL=http://host.docker.internal:9876/webhook
    LOB_PORT=9876

    # ------------------------------------------------------------
    # Plugins
    # ------------------------------------------------------------
    TRACTION_INNKEEPER_TENANT_ID=innkeeper
    TRACTION_INNKEEPER_WALLET_NAME=traction_innkeeper
    #TRACTION_INNKEEPER_WALLET_KEY will be set by the instance script
    `;
    
    // Upload the config template to S3
    const configObject = new aws.s3.BucketObject("traction-config-template", {
        bucket: configBucket.id,
        key: `${environment}/config-template.env`,
        content: configTemplate,
        contentType: "text/plain",
    });
    
    return {
        configBucket: configBucket.bucket,
        configObjectKey: configObject.key,
    };
}